{"name":"Pyospf","tagline":"","body":"pyOSPF\r\n======\r\nA python implementation of the OSPF Routing Protocol.\r\nIt's probably very inaccurate but i try to implement it as accurate as i can.\r\nIts supposed to be used as an educational explanation of how OSPF works and not to be used as an emulator or anything like the CISCO emulators.\r\n\r\nI have divided the OSPF operations to 5 different operations and theses steps might not get fully implemented as this is a college project and i might run out of time.\r\n\r\nI'm going to start with Step 4 , because its the most important one.\r\n\r\n#Step 0 : Defining Router Class\r\n##Properties :\r\n* Router class methods map router actions [ex : send hello message]\r\n* Routers run in separate threads to emulate their parallelism in action.\r\n* Routers write outputs in separate files to be monitored separately. [ a good enough solution for threads to write outputs with console interface. i use tail -f command to monitor the outputs.]\r\n\r\n#Step 1 : Establishing Router Adjacency\r\n#Step 2 : Election of DR , BDR\r\n#Step 3 : Discovering Routes.\r\n\r\n\r\n\r\n#Step 4 : Calculating Routing Table\r\n\r\n##Inputs : \r\nAdjacency Information from all adjacent routers in the form of a Graph G.\r\n\r\n##Outputs : \r\nGenerate the routing table for this node to all other nodes.\r\n\r\n##Process : \r\napplying the implementation of dijktra's algorithm on the graph to generate the shortest path from the node to all other nodes in the AS.\r\n\r\n\r\n#Step 5 : Maintaining LSDB / Routing Table\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}